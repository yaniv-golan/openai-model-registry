#!/usr/bin/env python3
"""Merge ostruct pricing outputs (pricing_data/*.yaml) into data files.

This script reads pricing JSON/YAML generated by scripts/fetch_pricing_ostruct.py
and updates pricing blocks for matching models in data/models.yaml (and
optionally provider-specific data in data/overrides.yaml if present).

It expects the unified pricing schema fields:
  - scheme, unit, input_cost_per_unit, output_cost_per_unit, currency

After merging, you can run scripts/data_convert_unified_pricing.py to
normalize capabilities and recompute checksums.
"""

from __future__ import annotations

import glob
from pathlib import Path
from typing import Any, Dict, Tuple

import yaml

ROOT = Path(__file__).resolve().parents[1]
PRICING_DIR = ROOT / "pricing_data"
MODELS_PATH = ROOT / "data" / "models.yaml"
OVERRIDES_PATH = ROOT / "data" / "overrides.yaml"


def _load_yaml(path: Path) -> Dict[str, Any]:
    """Load YAML file into a dictionary (empty dict if missing)."""
    if not path.exists():
        return {}
    with path.open("r", encoding="utf-8") as f:
        data: Dict[str, Any] = yaml.safe_load(f) or {}
    return data


def _dump_yaml(data: Dict[str, Any], path: Path) -> None:
    """Write a dictionary to YAML with stable key order."""
    with path.open("w", encoding="utf-8") as f:
        yaml.safe_dump(data, f, sort_keys=False)


def _extract_pricing(pr: Dict[str, Any]) -> Dict[str, Any]:
    """Normalize a pricing payload to unified pricing schema fields."""
    return {
        "scheme": pr.get("scheme", "per_token"),
        "unit": pr.get("unit", "million_tokens"),
        "input_cost_per_unit": float(pr.get("input_cost_per_unit", 0.0)),
        "output_cost_per_unit": float(pr.get("output_cost_per_unit", 0.0)),
        "currency": pr.get("currency", "USD"),
    }


def _merge_into_models(models_yaml: Dict[str, Any], model_name: str, pricing: Dict[str, Any]) -> bool:
    """Merge pricing into base models.yaml entry if present."""
    models = models_yaml.get("models", {})
    if model_name not in models:
        return False
    entry = models[model_name]
    entry.setdefault("pricing", {})
    entry["pricing"].update(pricing)
    models[model_name] = entry
    models_yaml["models"] = models
    return True


def _merge_into_overrides(overrides_yaml: Dict[str, Any], model_name: str, pricing: Dict[str, Any]) -> bool:
    """Merge pricing into overrides.yaml entries for providers that have the model."""
    # If overrides exist, update only when a model entry exists under a provider.
    changed = False
    overrides = overrides_yaml.get("overrides", {})
    for _provider, block in overrides.items():
        models = block.get("models", {})
        if model_name in models:
            models[model_name].setdefault("pricing", {})
            models[model_name]["pricing"].update(pricing)
            block["models"] = models
            overrides[_provider] = block
            changed = True
    overrides_yaml["overrides"] = overrides
    return changed


def merge_pricing() -> Tuple[bool, bool]:
    """Merge pricing_data/*.yaml into data files; returns (models_changed, overrides_changed)."""
    models_yaml = _load_yaml(MODELS_PATH)
    overrides_yaml = _load_yaml(OVERRIDES_PATH) if OVERRIDES_PATH.exists() else {}

    changed_models = False
    changed_overrides = False

    for path in glob.glob(str(PRICING_DIR / "*.yaml")):
        pdata = _load_yaml(Path(path))
        model_name = str(pdata.get("model", "")).strip()
        if not model_name:
            continue
        pricing = _extract_pricing(pdata)
        changed_models |= _merge_into_models(models_yaml, model_name, pricing)
        if overrides_yaml:
            changed_overrides |= _merge_into_overrides(overrides_yaml, model_name, pricing)

    if changed_models:
        _dump_yaml(models_yaml, MODELS_PATH)
    if changed_overrides and overrides_yaml:
        _dump_yaml(overrides_yaml, OVERRIDES_PATH)

    return changed_models, changed_overrides


def main() -> None:
    """Entry point for merging pricing into data files."""
    changed_models, changed_overrides = merge_pricing()
    print(f"Merged pricing: models.yaml changed={changed_models}, overrides.yaml changed={changed_overrides}")


if __name__ == "__main__":
    main()
